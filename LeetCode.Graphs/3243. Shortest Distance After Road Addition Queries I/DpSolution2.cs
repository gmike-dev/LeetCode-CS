namespace LeetCode.Graphs._3243._Shortest_Distance_After_Road_Addition_Queries_I;

public class DpSolution2
{
  public int[] ShortestDistanceAfterQueries(int n, int[][] queries)
  {
    var g = new List<int>[n];
    for (var i = 0; i < n - 1; i++)
      g[i] = [i + 1];
    g[n - 1] = [];
    var m = queries.Length;
    var dp = new int[n];
    for (var i = 0; i < n; i++)
      dp[i] = i;
    var result = new int[m];
    for (var i = 0; i < m; i++)
    {
      var q = queries[i];
      var u = q[0];
      var v = q[1];
      g[u].Add(v);
      dp[v] = Math.Min(dp[v], dp[u] + 1);
      UpdateDistance(v);
      result[i] = dp[n - 1];
    }
    return result;

    void UpdateDistance(int v)
    {
      var q = new Queue<int>();
      q.Enqueue(v);
      while (q.Count != 0)
      {
        var i = q.Dequeue();
        foreach (var j in g[i])
        {
          if (dp[i] + 1 < dp[j])
          {
            dp[j] = dp[i] + 1;
            q.Enqueue(j);
          }
        }
      }
    }
  }
}

[TestFixture]
public class DpSolution2Tests
{
  [Test]
  public void Test1()
  {
    new DpSolution2().ShortestDistanceAfterQueries(5, [[2, 4], [0, 2], [0, 4]]).Should()
      .BeEquivalentTo([3, 2, 1], o => o.WithStrictOrdering());
  }

  [Test]
  public void Test2()
  {
    new DpSolution2().ShortestDistanceAfterQueries(4, [[0, 3], [0, 2]]).Should()
      .BeEquivalentTo([1, 1], o => o.WithStrictOrdering());
  }

  [Test]
  public void Test4()
  {
    new DpSolution2().ShortestDistanceAfterQueries(11, [[1, 10], [7, 10]]).Should()
      .BeEquivalentTo([2, 2], o => o.WithStrictOrdering());
  }

  [Test]
  public void Test3()
  {
    new DpSolution2().ShortestDistanceAfterQueries(500,
      [
        [0, 2], [2, 4], [4, 6], [6, 8], [8, 10], [10, 12], [12, 14], [14, 16], [16, 18], [18, 20], [20, 22], [22, 24],
        [24, 26], [26, 28], [28, 30], [30, 32], [32, 34], [34, 36], [36, 38], [38, 40], [40, 42], [42, 44], [44, 46],
        [46, 48], [48, 50], [50, 52], [52, 54], [54, 56], [56, 58], [58, 60], [60, 62], [62, 64], [64, 66], [66, 68],
        [68, 70], [70, 72], [72, 74], [74, 76], [76, 78], [78, 80], [80, 82], [82, 84], [84, 86], [86, 88], [88, 90],
        [90, 92], [92, 94], [94, 96], [96, 98], [98, 100], [100, 102], [102, 104], [104, 106], [106, 108], [108, 110],
        [110, 112], [112, 114], [114, 116], [116, 118], [118, 120], [120, 122], [122, 124], [124, 126], [126, 128],
        [128, 130], [130, 132], [132, 134], [134, 136], [136, 138], [138, 140], [140, 142], [142, 144], [144, 146],
        [146, 148], [148, 150], [150, 152], [152, 154], [154, 156], [156, 158], [158, 160], [160, 162], [162, 164],
        [164, 166], [166, 168], [168, 170], [170, 172], [172, 174], [174, 176], [176, 178], [178, 180], [180, 182],
        [182, 184], [184, 186], [186, 188], [188, 190], [190, 192], [192, 194], [194, 196], [196, 198], [198, 200],
        [200, 202], [202, 204], [204, 206], [206, 208], [208, 210], [210, 212], [212, 214], [214, 216], [216, 218],
        [218, 220], [220, 222], [222, 224], [224, 226], [226, 228], [228, 230], [230, 232], [232, 234], [234, 236],
        [236, 238], [238, 240], [240, 242], [242, 244], [244, 246], [246, 248], [248, 250], [250, 252], [252, 254],
        [254, 256], [256, 258], [258, 260], [260, 262], [262, 264], [264, 266], [266, 268], [268, 270], [270, 272],
        [272, 274], [274, 276], [276, 278], [278, 280], [280, 282], [282, 284], [284, 286], [286, 288], [288, 290],
        [290, 292], [292, 294], [294, 296], [296, 298], [298, 300], [300, 302], [302, 304], [304, 306], [306, 308],
        [308, 310], [310, 312], [312, 314], [314, 316], [316, 318], [318, 320], [320, 322], [322, 324], [324, 326],
        [326, 328], [328, 330], [330, 332], [332, 334], [334, 336], [336, 338], [338, 340], [340, 342], [342, 344],
        [344, 346], [346, 348], [348, 350], [350, 352], [352, 354], [354, 356], [356, 358], [358, 360], [360, 362],
        [362, 364], [364, 366], [366, 368], [368, 370], [370, 372], [372, 374], [374, 376], [376, 378], [378, 380],
        [380, 382], [382, 384], [384, 386], [386, 388], [388, 390], [390, 392], [392, 394], [394, 396], [396, 398],
        [398, 400], [400, 402], [402, 404], [404, 406], [406, 408], [408, 410], [410, 412], [412, 414], [414, 416],
        [416, 418], [418, 420], [420, 422], [422, 424], [424, 426], [426, 428], [428, 430], [430, 432], [432, 434],
        [434, 436], [436, 438], [438, 440], [440, 442], [442, 444], [444, 446], [446, 448], [448, 450], [450, 452],
        [452, 454], [454, 456], [456, 458], [458, 460], [460, 462], [462, 464], [464, 466], [466, 468], [468, 470],
        [470, 472], [472, 474], [474, 476], [476, 478], [478, 480], [480, 482], [482, 484], [484, 486], [486, 488],
        [488, 490], [490, 492], [492, 494], [494, 496], [496, 498]
      ]).Should()
      .BeEquivalentTo(
      [
        498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479, 478, 477,
        476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 466, 465, 464, 463, 462, 461, 460, 459, 458, 457, 456, 455,
        454, 453, 452, 451, 450, 449, 448, 447, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437, 436, 435, 434, 433,
        432, 431, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415, 414, 413, 412, 411,
        410, 409, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389,
        388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367,
        366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351, 350, 349, 348, 347, 346, 345,
        344, 343, 342, 341, 340, 339, 338, 337, 336, 335, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323,
        322, 321, 320, 319, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301,
        300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279,
        278, 277, 276, 275, 274, 273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257,
        256, 255, 254, 253, 252, 251, 250
      ], o => o.WithStrictOrdering());
  }
}
