namespace LeetCode._200._Number_of_Islands;

public class UnionFindSolution
{
  public int NumIslands(char[][] grid)
  {
    var n = grid.Length;
    var m = grid[0].Length;
    var u = new UnionFind((n * m + 1) / 2 + 1);
    var s = new int[m];
    var k = 1;
    for (var i = 0; i < n; i++)
    for (var j = 0; j < m; j++)
    {
      if (grid[i][j] == '1')
      {
        if (j > 0 && s[j - 1] != 0)
        {
          if (s[j] != 0)
            u.Union(s[j - 1], s[j]);
          s[j] = s[j - 1];
        }
        else if (s[j] == 0)
        {
          u.MakeSet(k);
          s[j] = k;
          k++;
        }
      }
      else
      {
        s[j] = 0;
      }
    }
    return u.GetCount();
  }

  private class UnionFind(int n)
  {
    private readonly int[] parent = new int[n];
    private readonly int[] size = new int[n];
    private int count;

    public int GetCount() => count;

    public void MakeSet(int x)
    {
      parent[x] = x;
      size[x] = 1;
      count++;
    }

    public int Find(int x)
    {
      while (parent[x] != x)
      {
        parent[x] = parent[parent[x]];
        x = parent[x];
      }
      return x;
    }

    public void Union(int x, int y)
    {
      x = Find(x);
      y = Find(y);
      if (x != y)
      {
        if (size[x] < size[y])
          (x, y) = (y, x);
        parent[y] = x; // Always add a smaller set to a larger set.
        size[x] += size[y];
        count--;
      }
    }
  }
}

[TestFixture]
public class UnionFindSolutionTests
{
  [Test]
  public void Test1()
  {
    new UnionFindSolution().NumIslands(
    [
      ['1', '1', '1', '1', '0'],
      ['1', '1', '0', '1', '0'],
      ['1', '1', '0', '0', '0'],
      ['0', '0', '0', '0', '0']
    ]).Should().Be(1);
  }

  [Test]
  public void Test2()
  {
    new UnionFindSolution().NumIslands(
    [
      ['1', '1', '0', '0', '0'],
      ['1', '1', '0', '0', '0'],
      ['0', '0', '1', '0', '0'],
      ['0', '0', '0', '1', '1']
    ]).Should().Be(3);
  }

  [Test]
  public void Test3()
  {
    new UnionFindSolution().NumIslands(
    [
      ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1'],
      ['0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'],
      ['1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'],
      ['0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'],
      ['1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']
    ]).Should().Be(1);
  }

  [Test]
  public void Test4()
  {
    new UnionFindSolution().NumIslands(
    [
      ['1']
    ]).Should().Be(1);
  }
}
