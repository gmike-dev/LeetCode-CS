namespace LeetCode._200._Number_of_Islands;

public class BfsSolution
{
  private int m;
  private int n;
  private bool[,] visited;
  private readonly (int, int)[] dir = [(1, 0), (0, 1), (-1, 0), (0, -1)];
  private char[][] grid;

  public int NumIslands(char[][] grid)
  {
    this.grid = grid;

    m = grid.Length;
    n = grid[0].Length;
    visited = new bool[m, n];
    var answer = 0;
    for (var i = 0; i < m; i++)
    for (var j = 0; j < n; j++)
    {
      if (grid[i][j] == '1' && !visited[i, j])
      {
        Bfs(i, j);
        answer++;
      }
    }
    return answer;
  }

  private void Bfs(int i, int j)
  {
    var q = new Queue<(int x, int y)>();
    q.Enqueue((i, j));
    visited[i, j] = true;
    while (q.Count > 0)
    {
      var (x, y) = q.Dequeue();
      foreach (var (dx, dy) in dir)
      {
        var nx = x + dx;
        var ny = y + dy;
        if (nx >= 0 && ny >= 0 && nx < m && ny < n && grid[nx][ny] == '1' && !visited[nx, ny])
        {
          q.Enqueue((nx, ny));
          visited[nx, ny] = true;
        }
      }
    }
  }
}

[TestFixture]
public class BfsSolutionTests
{
  [Test]
  public void Test1()
  {
    new BfsSolution().NumIslands(
    [
      ['1', '1', '1', '1', '0'],
      ['1', '1', '0', '1', '0'],
      ['1', '1', '0', '0', '0'],
      ['0', '0', '0', '0', '0']
    ]).Should().Be(1);
  }

  [Test]
  public void Test2()
  {
    new BfsSolution().NumIslands(
    [
      ['1', '1', '0', '0', '0'],
      ['1', '1', '0', '0', '0'],
      ['0', '0', '1', '0', '0'],
      ['0', '0', '0', '1', '1']
    ]).Should().Be(3);
  }

  [Test]
  public void Test3()
  {
    new BfsSolution().NumIslands(
    [
      ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1'],
      ['0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'],
      ['1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'],
      ['0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'],
      ['1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'],
      ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']
    ]).Should().Be(1);
  }
}
